~ filter(okinawa, Age == .x) %>% NROW()
)
AgeL %>% map(
~ filter(okinawa, Age == .x) %>% NROW()
)
AgeL %>% map_chr(
~ filter(okinawa, Age == .x) %>% NROW()
)
?NROW()
# map()だと出力はリストで見にくい。
# map_chr()だと、ベクトルで出力してくれる。
AgeL %>% map_chr(
~ filter(okinawa, Age == .x) %>% NROW()
)
AgeL <- AgeL[-1]
library(magrittr)
AgeL %>% map(
~ filter(okinawa, Age  == .x, Sex == "女性") %>% {
tmp <-  use_series(data = ., Opinion) %>% as.character()
writeLines(text = tmp, con = paste0("F", (2:7)[AgeL == .x], "0.txt"))
}
)
AgeL %>% map(
~ filter(okinawa, Age  == .x, Sex == "女性") %>% {
tmp <-  use_series(data = ., Opinion) %>% as.character()
writeLines(text = tmp, con = paste0("F", (2:7)[AgeL == .x], "0.txt"))
}
)
library(RMeCab)
AgeL %>% map(
~ filter(okinawa, Age  == .x, Sex == "女性") %>% {
tmp <-  use_series(data = ., Opinion) %>% as.character()
writeLines(text = tmp, con = paste0("F", (2:7)[AgeL == .x], "0.txt"))
}
)
AgeL %>% map(
~ filter(okinawa, Age  == .x, Sex == "男性") %>% {
tmp <-  use_series(data = ., Opinion) %>% as.character()
writeLines(text = tmp, con = paste0("M", (2:7)[AgeL == .x], "0.txt"))
}
)
AgeL %>% map(
~ filter(okinawa, Age  == .x, Sex == "男性") %>% {
tmp <-  use_series(data = ., Opinion) %>% as.character()
writeLines(text = tmp, con = paste0("M", (2:7)[AgeL == .x], "0.txt"))
}
)
library(RMeCab)
FM <- docDF("okinawa", type = 1,     #type=1は形態素解析。
pos = c("名詞","動詞","形容詞"))
FM <- docDF("data/okinawa", type = 1,     #type=1は形態素解析。
pos = c("名詞","動詞","形容詞"))
FM2 <- FM %>% filter(POS2 %in% c("一般", "固有", "自立"))
# 形態素から、必要な単語のみを抽出。
FM2 <- FM %>% filter(POS2 %in% c("一般", "固有", "自立"))
View(FM2)
FM2 %>% NROW()
# 動詞の自立語には、「ある」「いう」「できる」「思う」など不要な単語も入っている。
# これらを削除するには、「!」と「%in%」を使う。
FM2 <- FM2 %>% filter(! TERM %in% c("ある","いう","いる", "する",
"できる", "なる","思う"))
FM2 %>% NROW()
# 整えたテキストデータから、単語文書行列を作る。
FM <- docDF("data/okinawa", type = 1,     #type=1は形態素解析。
pos = c("名詞","動詞","形容詞"))
# 形態素から、必要な単語のみを抽出。
FM2 <- FM %>% filter(POS2 %in% c("一般", "固有", "自立"))
# 動詞の自立語には、「ある」「いう」「できる」「思う」など不要な単語も入っている。
# これらを削除するには、「!」と「%in%」を使う。
FM2 <- FM2 %>% filter(! TERM %in% c("ある","いう","いる", "する",
"できる", "なる","思う"))
FM2 %>% NROW()
FM2$SUMS <- rowSums(FM2[, -(1:3)])
View(FM2)
# 「$」は添字。FM2の単語文書行列に「SUMS」という列を新規追加。
# rowSumsは各行の合計を求める。SUMS列に代入。
# 1，2，3列目は形態素と品詞の情報なので除外。
FM2$SUMS <- rowSums(FM2[, -(1:3)])
summary(FM2$SUMS)
# 今回は7回以上の単語のみ抽出するが、数字はデータによる。
FM3 <- FM2 %>% filter(SUMS >= 7)
FM3 %>% NROW
colnames((FM3))
# 今回は7回以上の単語のみ抽出するが、数字はデータによる
# 各行の合計をSUMSに入れているので、7回は、「男女20～70代全部の合計で7回以上使われた単語」という意味
FM3 <- FM2 %>% filter(SUMS >= 7)
FM3 %>% NROW
colnames((FM3))
FM3$TERM
View(FM3)
FM3$TERM[168]
library(stringr)
## 正規表現で数値列だけを取り出す
FM4 <- FM3 %>% select(matches("[FM]\\d\\d"))
## 正規表現で数値列だけを取り出す
FM4 <- FM3 %>% select(matches("[FM]\\d\\d"))
## 列名を設定
colnames(FM4) <- str_extract(colnames(FM4), "[FM]\\d\\d")
View(FM4)
## 列名を設定
colnames(FM4) <- str_extract(colnames(FM4), "[FM]\\d\\d")
## 列名を設定
colnames(FM4) <- str_extract(colnames(FM4), "[FM]\\d\\d")
## 行列の名前を設定
rownames(FM4) <- FM3$TERM
View(FM4)
View(FM4)
## 行列の名前を設定
rownames(FM4) <- FM3$TERM
## 次元(行数と列数)を確認
dim(FM4)
## 列名と行名を確認
colnames(FM4)
rownames(FM4)
## 行列の名前を設定
rownames(FM4) <- FM3$TERM
### 7.3 意見データの対応分析
install.packages(c("FactoMineR", "factoextra"))
library(FactoMineR)
## ggplot2 ベースのバイプロットを描く
library(factoextra)
fviz_ca_biplot(FM4ca)
# 対応分析はCA
FM4ca <- CA(FM4, graph = FALSE)
fviz_ca_biplot(FM4ca)
# 対応分析はCA。CAは対応分析だけでなく、独自にバイプロットも作成する。
# 今回は、ggplot2で作りたいから、「graph = FALSE」にする。
FM4ca <- CA(FM4, graph = FALSE)
## ggplot2 ベースのバイプロットを描く
library(factoextra)
fviz_ca_biplot(FM4ca)
# 上記の実行結果の画像で文字化けが生じている場合、以下のようにPDF画像として作成して確認してみてください
# 3行続けて実行することで画像ファイルが作成されます
# RStudio 右のFilesタブで画像ファイルをクリックすることで、適切なビューワー が立ちあがります
cairo_pdf("FM4ca.pdf", family = "JP1")# Mac の場合は family = "HiraKakuProN-W3" と変えてください
fviz_ca_biplot(FM4ca)
dev.off()
## 正規表現で数値列だけを取り出す
# matches()は指定された文字列と一致する列だけ取り出す。
# [FM]はFかMで始まり、「\\d\\d」は数字が2つ続く。
FM4 <- FM3 %>% select(matches("[FM]\\d\\d"))
## 列名を設定
colnames(FM4) <- str_extract(colnames(FM4), "[FM]\\d\\d")
## 行列の名前を設定
rownames(FM4) <- FM3$TERM
## 次元(行数と列数)を確認
dim(FM4)
## 列名と行名を確認
colnames(FM4)
rownames(FM4)
fviz_ca_biplot(FM4ca)
### 独立性の検定(カイ自乗検定)
# Excel ファイルの読み込み
library(readxl)
dat <- read_excel("data/sentences.xlsx")
## クロス表を生成
dat_tb <- xtabs(~ Sex + Sent, data = dat)
dat_tb
options("digits" = 7)
chisq.test(dat_tb)
### 対応分析
dat <- matrix(c(1,2,0,0,  0,2,6,0, 0,1,2,2,  0,0,0,2),
ncol = 4, byrow = TRUE)
colnames(dat) <- c("中卒F", "高校中退F", "高卒F", "大卒F")
rownames(dat) <- c("中卒M", "高校中退M", "高卒M", "大卒M")
View(dat)
View(data01)
dat
datCA <- CA(dat, graph = FALSE)
fviz_ca_biplot(datCA)
dat_cp <- MASS::corresp(dat, nf = 2)
biplot(dat_cp)
# 「corresp」はMASSライブラリの関数である。
# しかし、MASSライブラリはdplyrライブラリと一部、衝突するので、読み込まない。
# 「：：」を使って、特定の関数だけ読み込む。
dat_cp <- MASS::corresp(dat, nf = 2)
biplot(dat_cp)
### 8.1 ダウンロードしたファイルの整形と解析
source("http://rmecab.jp/R/Aozora.R")
Aozora
x <- Aozora("http://www.aozora.gr.jp/cards/000081/files/43754_ruby_17594.zip")
library(RMeCab)
setwd("/home/ishida/Dropbox/R/Morikita/Version2/")
miyaz <- docDF("data/NORUBY/chumonno_oi_ryoriten2.txt", type = 1)
miyaz <- docDF(x, type = 1)
library(dplyr)
miyaz %>% head()
View(miyaz)
miyaz %>% filter(POS2 == "固有名詞")
# まずは、全ての列名を抽出して、それから、POSで必要な品詞のみを抽出。
# そして、頻度列だけ列名を変える。
miyaz2 <- miyaz %>% select(everything(), FREQ = chumonno_oi_ryoriten2.txt) %>%
filter(POS1 %in% c("名詞","形容詞"),
POS2 %in% c("一般", "固有名詞", "自立"))
miyaz2 %>% arrange(FREQ) %>% tail(50)
## ワードクラウドを作成する準備
install.packages("wordcloud")
###### ワードクラウドを作成する準備
# install.packages("wordcloud")
library(wordcloud)
## プロット作成
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1", colors = brewer.pal(8, "Dark2"))
## プロット作成
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1", colors = brewer.pal(8, "Dark2"))
## プロット作成
# min.freqは頻度の最小値。
# scaleは文字の最大・最小の大きさ
# familyは文字指定。
# brewer.palでカラーパレットを作成。
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1", colors = brewer.pal(80, "Red"))
## プロット作成
# min.freqは頻度の最小値。
# scaleは文字の最大・最小の大きさ
# familyは文字指定。
# brewer.palでカラーパレットを作成。
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1", colors = brewer.pal(10, "Red"))
## プロット作成
# min.freqは頻度の最小値。
# scaleは文字の最大・最小の大きさ
# familyは文字指定。
# brewer.palでカラーパレットを作成。
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1", colors = brewer.pal(10, "Red2"))
## プロット作成
# min.freqは頻度の最小値。
# scaleは文字の最大・最小の大きさ
# familyは文字指定。
# brewer.palでカラーパレットを作成。
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1", colors = brewer.pal(8, "Red"))
## プロット作成
# min.freqは頻度の最小値。
# scaleは文字の最大・最小の大きさ
# familyは文字指定。
# brewer.palでカラーパレットを作成。
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1", colors = brewer.pal(8, "Dark2"))
## プロット作成
# min.freqは頻度の最小値。
# scaleは文字の最大・最小の大きさ
# familyは文字指定。
# brewer.palでカラーパレットを作成。
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1")
## プロット作成
# min.freqは頻度の最小値。
# scaleは文字の最大・最小の大きさ
# familyは文字指定。
# brewer.palでカラーパレットを作成。
wordcloud(miyaz2$TERM, miyaz2$FREQ, min.freq = 3,
scale = c(6,1),family = "JP1", colors = brewer.pal(8, "Dark2"))
########### ネットワークグラフ
bigram <- NgramDF("data/NORUBY/chumonno_oi_ryoriten2.txt", type = 1,
pos = c("名詞","形容詞", "動詞"))
bigram <- NgramDF(x, type = 1, pos = c("名詞","形容詞", "動詞"))
bigram %>% head()
bigram2 <- docDF("data/NORUBY/chumonno_oi_ryoriten2.txt", type = 1, N = 2,
pos = c("名詞","形容詞", "動詞"), nDF = 1)
bigram2 <- docDF("data/NORUBY/chumonno_oi_ryoriten2.txt", type = 1, N = 2,
pos = c("名詞","形容詞", "動詞"), nDF = 1)
bigram2 %>% head()
library(magrittr)
bigram2 %>% use_series(POS2) %>% unique()
bigram2 %>% filter(POS2 == "数-数")
bigram2 %>% filter(POS2 == "代名詞-接尾")
bigram3 <- bigram2 %>% select(everything(),
FREQ = chumonno_oi_ryoriten2.txt) %>%
filter(!grepl("数|接尾|非自立", POS2) | FREQ > 5)
View(bigram3)
bigram3 %>% NROW()
bigram3 %>% head()
# bigram3では、品詞細分類が「数」「接尾」「非自立」を削除した。
# bigram4で、頻度2以上のみを抽出。
bigram4 <- bigram3 %>% select (N1, N2, FREQ) %>%
filter(FREQ >= 2)
bigram4 %>% NROW()
bigram4 %>% filter(FREQ == max(FREQ))
bigram5 <- bigram4 %>% filter(FREQ < 25)
library(igraph)
## ネットワークグラフを作るには、データ形式がネットワークグラフ形式でなければならない。
## graph_from_data_frameは、データフレームをネットワークグラフ形式に変換する関数。
bigram6 <- graph_from_data_frame(bigram5)
# ネットワークグラフ形式になったデータをプロットする。（インタラクティブ）
tkplot(bigram6, vertex.color = "SkyBlue", vertex.size = 22)
E(bigram6)$weight <- bigram5$FREQ *2
E(bigram6)$weight <- bigram5$FREQ *2
bigram7 <- edge.betweenness.community(bigram6,
weights = E(bigram6)$weight,
directed = F)
bigram7 <- edge.betweenness.community(bigram6,
weights = E(bigram6)$weight,
directed = F)
bigram7 <- edge.betweenness.community(bigram6,
weights = E(bigram6)$weight,
directed = F)
plot(bigram6, vertex.color = "SkyBlue", vertex.size = 6,
vertex.label.cex  = 1.5, ## 形態素のサイズ
vertex.label.dist = .5,  ## ラベル（単語）を円の外に表示。円のサイズが小さいので、単語がはみ出ると見にくくなる。だから、元から外に表示。
edge.width = E(bigram6)$weight, ## 辺のサイズを調整
vertex.label.family = "JP1") ## フォントの指定
bigram7 <- edge.betweenness.community(bigram6,
weights = E(bigram6)$weight,
directed = F)
plot(bigram7, bigram6, vertex.label.family = "JP1")# Mac の場合は family = "HiraKakuProN-W3" と変えてください
tkplot(bigram7, bigram6, vertex.label.family = "JP1")# Mac の場合は family = "HiraKakuProN-W3" と変えてください
tkplot(bigram7, bigram6, vertex.label.family = "JP1")# Mac の場合は family = "HiraKakuProN-W3" と変えてください
plot(bigram7, bigram6, vertex.label.family = "JP1")# Mac の場合は family = "HiraKakuProN-W3" と変えてください
library(RMeCab)
getwd()
## Windowsの場合は以下の "data/prime/utf" を "data/prime/sjis" にするなど
## 自身の作業環境にあわせて適宜変更
prime <- docMatrix2("data/prime/sjis", pos = c("名詞","形容詞","動詞"),
weight = "tf*idf*norm")
View(prime)
ncol(prime) ; nrow(prime)
View(prime)
library(stringr)
library(dplyr)
library(magrittr)
# "instSenso.R"
install.packages("Rcmdr",dependencies = TRUE)
View(prime)
chemin = paste(find.package(package="Rcmdr")[1],"/etc",sep="")
menu = readLines(con=paste(chemin,"/Rcmdr-menus.txt",sep=""))
if (any(i <- grep("Add menu for SensoMineR" ,menu))){
lig1 = grep("Add menu for SensoMineR",menu)
lig2 = grep("End add menu for SensoMineR",menu)
if (lig2 == length(menu)) {
menu = menu[1:(lig1-1)]
} else {
menu = menu[c(1:(lig1-1),(lig2+1):length(menu))]
}
}
install.packages("SensoMineR",dependencies = TRUE)
add.menu.senso = readLines("http://sensominer.free.fr/add-menu-senso.txt")
senso = readLines("http://sensominer.free.fr/Rcmdr-senso.r")
writeLines(senso,con=paste(chemin,"/Rcmdr-senso.r",sep=""))
menu = c(menu,add.menu.senso)
writeLines(menu,con=paste(chemin,"/Rcmdr-menus.txt",sep=""))
library(Rcmdr)
chemin = paste(find.package(package="Rcmdr")[1],"/etc",sep="")
menu = readLines(con=paste(chemin,"/Rcmdr-menus.txt",sep=""))
if (any(i <- grep("Add menu for SensoMineR" ,menu))){
lig1 = grep("Add menu for SensoMineR",menu)
lig2 = grep("End add menu for SensoMineR",menu)
if (lig2 == length(menu)) {
menu = menu[1:(lig1-1)]
} else {
menu = menu[c(1:(lig1-1),(lig2+1):length(menu))]
}
}
install.packages("SensoMineR",dependencies = TRUE)
add.menu.senso = readLines("http://sensominer.free.fr/add-menu-senso.txt")
senso = readLines("http://sensominer.free.fr/Rcmdr-senso.r")
writeLines(senso,con=paste(chemin,"/Rcmdr-senso.r",sep=""))
menu = c(menu,add.menu.senso)
writeLines(menu,con=paste(chemin,"/Rcmdr-menus.txt",sep=""))
library(stringr)
library(dplyr)
library(magrittr)
## 列名が長すぎるので短縮する
## 「_general-policy-speech.txt」が不要なので削除。（空白に置き換える）
colnames(prime)  %<>% str_replace("_general-policy-speech.txt", "")
View(prime)
colnames(prime)  %<>% str_replace("(\\d{4})\\d{4}_(\\d{3})", "\\1_\\2")
View(prime)
# \\dは数字。{4}は4回。4回連続数字が並ぶ。
# 4回数字が並び、また4回数字が並び、「_」を挟んで、3回数字が並ぶ文字列を
# 最初の4行と最後の3行だけを取り出す。p61
colnames(prime)  %<>% str_replace("(\\d{4})\\d{4}_(\\d{3})", "\\1_\\2")
View(prime)
### 9.3 所信表明演説のクラスター分析
hc <- prime %>% t %>% dist %>% hclust("ward.D2")
#
install.packages("ggdendro")
library(ggdendro)
?t()
library(ggdendro)
ggdendrogram(hc, rotate= TRUE)
# 上記の実行結果の画像で文字化けが生じている場合、以下のようにPDF画像として作成して確認してみてください
# 3行続けて実行することで画像ファイルが作成されます
# RStudio 右のFilesタブで画像ファイルをクリックすることで、適切なビューワー が立ちあがります
cairo_pdf(file = "hc.pdf", family = "JP1")
ggdendrogram(hc, rotate= TRUE)
dev.off()
TD <- matrix (c(1,0,0,0,1,0,
0,1,0,1,0,1,
0,1,0,0,0,0,
0,1,0,0,0,0,
0,0,1,0,0,1,
1,1,1,1,0,0,
0,0,1,2,1,0,
1,1,0,0,0,0), nrow = 8, byrow = TRUE)
## 作成した行列に列名と行名を設定
colnames(TD) <- paste0("doc", 1:6)
rownames(TD) <- paste0("w", 1:8)
# 特異値分解（3つの行列の積）。
# 全行列を取り出すのはデータが大きい。だから最初の数行・数列だけ取り出して計算。（近似）
TD_svd <- svd(TD)
options(digits = 3)
TD_svd$u
TD_svd$d
TD_svd$v
t(TD_svd$u[, 1:3]) %*% TD
### 9.6 潜在的意味インデキシングによる分類
install.packages("rgl")
prime.svd <- svd(prime)
prime2 <- t(prime.svd$u[, 1:3]) %*% prime
dim(prime2)
colnames(prime2) <- prime2 %>% colnames() %>%
str_extract("\\d{4}_\\d{2,3}")
cols <- prime2 %>% colnames() %>% str_extract("\\d{3}")
# パッケージ読み込み
library(rgl)
# 別ウィンドウを開き
rgl.open()
# 別ウィンドウを開き
rgl.open()
# 座標を色分けする
rgl.lines(c(-1,1), 0,0, color = "gold")
rgl.lines(0, c(-1,1), 0, color = "gray")
rgl.lines(0,0,c(-1,1), color = "black")
# 3次元空間のカラーを指定し
rgl.bbox(color = "blue", emission = "green")
# 文書名を付置する
rgl.texts(prime2[1,], prime2[2,], prime2[3,],
colnames(prime2), color = cols)
rgl.snapshot(file = "prime.png")
rgl.close()
# 別ウィンドウを開き
rgl.open()
# 座標を色分けする
rgl.lines(c(-1,1), 0,0, color = "gold")
rgl.lines(0, c(-1,1), 0, color = "gray")
rgl.lines(0,0,c(-1,1), color = "black")
# 3次元空間のカラーを指定し
rgl.bbox(color = "blue", emission = "green")
# 文書名を付置する
rgl.texts(prime2[1,], prime2[2,], prime2[3,],
colnames(prime2), color = cols)
rgl.snapshot(file = "prime.png")
install.packages(c("twitteR", "bit64", "rjson", "DBI", "httr",
"base64enc"), dependencies = TRUE)
install.packages(c("ABCoptim", "abcrf", "abjutils", "AbsFilterGSEA", "AbSim", "accrual", "acebayes", "ACEt", "ACMEeqtl", "acs", "actuar", "adabag", "adapr", "AdaptFitOS", "adaptMCMC", "addreg", "ade4", "adegenet", "adegraphics", "adehabitat", "adehabitatHR", "adehabitatHS", "adehabitatLT", "adehabitatMA", "adephylo", "adespatial", "adlift", "adwave", "afex", "agRee", "agricolae", "agridat", "AHMbook", "ahp", "AICcmodavg", "AID", "aidar", "AIG", "airGR", "alakazam", "ald", "alineR", "alleHap", "AlleleRetain", "alphashape3d", "alterryx", "ameco", "amen", "AMModels", "AmyloGram", "anacor", "analogsea", "analytics", "AnglerCreelSurveySimulation", "aniDom", "anim.plots", "AnnotationBustR", "anocva", "anomalyDetection", "anominate", "antaresRead", "AnthropMMD", "Anthropometry", "antitrust", "anytime", "aoos", "apaTables", "apcluster", "ape", "apex", "APfun", "aprof", "APSIM", "aqp", "arc", "ArchaeoPhases", "archdata", "archiDART", "archivist", "ArCo", "arfima", "argparse", "aroma.core", "aRpsDCA", "arsenal", "ARTP2", "arules", "arulesCBA", "arulesSequences", "arulesViz", "aRxiv", "asbio", "asdreader", "ashr", "asht", "ASMap", "asnipe", "aSPU", "AssayCorrector", "assertable", "assertr", "assignPOP", "AssocTests", "aster", "astrochron", "astsa", "asymmetry", "atsd", "aucm", "AutoDeskR", "autoimage", "autovarCore", "aVirtualTwins", "AWR", "aws.alexa", "aws.ec2metadata", "aws.signature", "aws.sns", "aws.sqs", "awsMethods", "AzureML", "BacArena", "backports", "backShift", "baitmet", "BAMBI", "bamdit", "BANOVA", "BART", "bartMachine", "bartMachineJARs", "Barycenter", "BAS", "base64url", "basefun", "basicspace", "BAT", "BatchExperiments", "BatchGetSymbols", "BatchJobs", "BatchMap", "batchtools", "BaTFLED3D", "bayesAB", "BayesBD", "BayesBinMix", "BayesCR", "bayesDP", "BayesianNetwork", "BayesianTools", "bayesImageS", "bayesLife", "bayesm", "bayesmeta", "bayesplot", "bayesPop", "bayesSurv", "bayesTFR", "BayesVarSel", "BayesXsrc", "bazar", "bbmle", "BCEE", "Bchron", "bcrm", "bcROCsurface", "bcrypt", "bda", "BDgraph", "bdots", "bdsmatrix", "bdvis", "bea.R", "BEACH", "beanz", "BEDMatrix", "bedr", "benchmarkme", "benchmarkmeData", "Bergm", "berryFunctions", "BeSS", "BEST", "betapart", "BETS", "BeviMed", "bfp", "BH", "bhm", "BiBitR", "bibliometrix", "bibtex", "BIEN", "bife", "BIFIEsurvey", "BIGDAWG", "bigKRLS", "biglasso", "bigmemory", "bigQueryR", "bigrquery", "bigtcr", "BinaryEPPM", "binaryLogic", "bindr", "binequality", "bingat", "binGroup", "BinNonNor", "BinNor", "binomen", "BinOrdNonNor", "binst", "bio3d", "BiodiversityR", "biogas", "bioinactivation", "BioInstaller", "biolink", "Biolinv", "biomartr", "BIOMASS", "biosignalEMG", "biotools", "BisRNA", "BivUnifBin", "bizdays", "BKPC", "blackbox", "Blaunet", "blavaan", "blob", "blockcluster", "blockmodeling", "blocksdesign", "BLPestimatoR", "blsAPI", "blscrapeR", "BMA", "bmixture", "bmlm", "bmp", "bmrm", "bnlearn", "bnnSurvival", "BNPMIXcluster", "BNSP", "bnspatial", "BOIN", "bold", "Bolstad", "bookdown", "Boom", "BoomSpikeSlab", "boostmtree", "boot", "bootnet", "bootsPLS", "boral", "Boruta", "BoSSA", "boxoffice", "BPEC", "BradleyTerry2", "BrailleR", "brainGraph", "brainR", "brant", "braQCA", "brea", "bReeze", "brglm", "brglm2", "bridgesampling", "briskaR", "brms", "Brobdingnag", "broman", "broom", "brotli", "bsam", "BSDA", "BsMD", "BSSasymp", "bsts", "btergm", "btf", "BTLLasso", "bujar", "bupaR", "burnr", "bWGR", "C50", "CaDENCE", "CADFtest", "CADStat", "CALF", "callr", "camtrapR", "candisc", "Canopy", "CANSIM2R", "canvasXpress", "capm", "car", "CARBayes", "CARBayesST", "caret", "carpenter", "cartography", "carx", "catdap", "CATkit", "catlearn", "catnet", "catR", "CATT", "causaleffect", "CausalGAM", "CausalImpact", "cba", "cbanalysis", "CBPS", "cbsodataR", "ccdrAlgorithm", "cchs", "CCTpack", "cdata", "cdcfluview", "cdfquantreg", "CDM", "CDVineCopulaConditional", "CEGO", "celestial", "cellWise", "CensMixReg", "censusr", "CerioliOutlierDetection", "CFC", "cgam", "cgdsr", "ChainLadder", "ChannelAttribution", "Chaos01", "ChaosGame", "checkmate", "checkpoint", "ChemometricsWithR", "ChemoSpec", "cherry", "chi", "childsds", "chillR", "chinese.misc", "CHMM", "chngpt", "CHNOSZ", "chopthin", "ChoR", "chron", "chunked", "CIAAWconsensus", "circlize", "circular", "cIRT", "cit", "cjoint", "Ckmeans.1d.dp", "cleanEHR", "cleangeo", "cleanNLP", "clhs", "clickR", "clickstream", "clifro", "climextRemes", "climwin", "clinfun", "clipr", "clisymbols", "CLME", "clubSandwich", "clue", "ClueR", "CluMix", "clust.bin.pair", "clusterPower", "ClusterR", "clusterSEs", "clusterSim", "ClustGeo", "clustMD", "clustMixType", "ClustOfVar", "clustRcompaR", "clustrd", "clustvarsel", "cmm", "cmna", "CMplot", "cmsaf", "cnmlcd", "coala", "cobalt", "CoClust", "COCONUT", "cocoreg", "cOde", "codep", "codingMatrices", "coefplot", "cofeatureR", "coin", "colf", "collapsibleTree", "coloc", "colorhcplot", "colorSpec", "colourpicker", "colourvision", "comato", "COMBAT", "COMBIA", "combiter", "cometExactTest", "comf", "CommEcol", "commonmark", "CompareCausalNetworks", "compareDF", "compareGroups", "compHclust", "Compind", "complexplus", "COMPoissonReg", "Compositional", "compound.Cox", "comtradr", "condformat", "condvis", "coneproj", "confidence", "configr", "confinterpret", "confSAM", "conover.test", "ConR", "ConSpline", "ConsRank", "ContaminatedMixt", "contfrac", "conting", "controlTest", "convevol", "convoSPAT", "coop", "copBasic", "copula", "CopulaDTA", "Corbi", "corehunter", "CORElearn", "coreSim", "corHMM", "CorporaCoCo", "corpus", "corr2D", "CorReg", "corregp", "corrgram", "corrplot", "CorrToolBox", "corset", "cotrend", "Counterfactual", "Countr", "countrycode", "countyfloods", "covafillr", "covr", "covRobust", "CovSelHigh", "cowplot", "coxme", "coxphf", "CPBayes", "CpGassoc", "CpGFilter", "CPMCGLM", "Cprob", "cpt", "cquad", "crayon", "crch", "crimCV", "crmPack", "Crossover", "CrossVA", "crs", "CRTgeeDR", "crul", "crunch", "cstab", "csv", "ctmcd", "ctmm", "cts", "ctsem", "CTT", "ctv", "CUB", "cubature", "cubfits", "Cubist", "CUFF", "curl", "cwhmisc", "Cyclops", "CytobankAPI", "d3heatmap", "d3r", "dae", "dat", "data.table", "data.tree", "dataRetrieval", "date", "dbarts", "dclone", "DDD", "deldir", "deltaPlotR", "demography", "dendextend", "dendroextras", "denstrip", "DepthProc", "desc", "descr", "DescTools", "deSolve", "devtools", "dfoptim", "diagram", "DiagrammeR", "diffobj", "difNLR", "digest", "discretecdAlgorithm", "distances", "distillery", "distr", "distrEx", "distrom", "dlstats", "dnet", "doBy", "DoE.base", "DoE.wrapper", "doParallel", "DoseFinding", "doSNOW", "dplR", "DPpackage", "DT", "dunn.test", "earth", "EbayesThresh", "ecd", "ecespa", "ecodist", "ECOSolveR", "effects", "eha", "ellipse", "encode", "energy", "enrichwith", "EnvStats", "Epi", "epiR", "epitools", "ergm", "estimability", "etl", "evaluate", "evir", "exact2x2", "exactci", "exams", "expint", "extraDistr", "FactoClass", "fAsianOptions", "fAssets", "fastcluster", "fastICA", "fBasics", "fCopulae", "fda", "fda.usc", "fExtremes", "fftw", "fGarch", "fICA", "fields", "filematrix", "findpython", "fingerprint", "flexclust", "flexmix", "fmsb", "fMultivar", "fold", "fOptions", "forcats", "foreach", "forecastHybrid", "forestplot", "formatR", "Formula", "formula.tools", "fpc", "fPortfolio", "fractal", "freqdom", "FSA", "fslr", "fTrading", "ftsa", "funData", "future", "gam", "gamlr", "gamlss", "gamlss.dist", "gamm4", "gap", "GCD", "gdata", "gdtools", "geigen", "gender", "GenomicTools", "GenSA", "geojsonio", "GEOmap", "geomorph", "geosphere", "geostatsp", "gepaf", "getopt", "getPass", "GGally", "ggExtra", "ggimage", "gglasso", "GGMselect", "ggrepel", "ggsci", "ggtern", "GIGrvg", "git2r", "githubinstall", "glm.predict", "glmbb", "glmBfp", "glmm", "glmmLasso", "glmmML", "glmmsr", "glmmTMB", "glmnetcr", "glmnetUtils", "glmpath", "glmpathcr", "GlobalOptions", "globals", "globe", "glogis", "gLRTH", "GMAC", "gmapsdistance", "gMCP", "Gmedian", "gmeta", "Gmisc", "gmm", "gmnl", "gmt", "gofastr", "GofKmt", "goft", "googleAnalyticsR", "googleAuthR", "googleCloudStorageR", "googleComputeEngineR", "googlePublicData", "googlesheets", "googleway", "GPareto", "GPoM", "gProfileR", "gquad", "gradDescent", "GRANBase", "graphicalVAR", "graphkernels", "graphql", "grattan", "gravity", "GreedyExperimentalDesign", "Greg", "grex", "Grid2Polygons", "gridExtra", "gridGraphics", "gridSVG", "groupdata2", "grove", "growthrates", "grpreg", "GrpString", "GRS.test", "grt", "GSED", "gSeg", "GSIF", "GSMX", "GSODR", "gsubfn", "gsw", "gsynth", "gTests", "gtrendsR", "GUniFrac", "gutenbergr", "GUTS", "gWidgets2RGtk2", "gWidgetsRGtk2", "GWmodel", "GWRM", "h2o", "h5", "hamlet", "hansard", "Haplin", "haploR", "HardyWeinberg", "harrietr", "hashmap", "haven", "hddplot", "hdm", "hdnom", "HDoutliers", "HDPenReg", "hdrcde", "healthcareai", "heatmaply", "heavy", "heemod", "HelpersMG", "heplots", "hergm", "hexbin", "hexSticker", "HGNChelper", "HHG", "HIBPwned", "HiCglmi", "HiddenMarkov", "hierNet", "highfrequency", "highlight", "highlightHTML", "highriskzone", "highSCREEN", "hisse", "HistData", "HistDAWass", "HiveR", "hkclustering", "hmi", "hmmm", "HMP", "HMPTrees", "hms", "hnp", "hoardr", "holdem", "homomorpheR", "Hotelling", "HRM", "HSAR", "HSAUR", "HSAUR2", "HSAUR3", "hsdar", "htmltidy", "htmltools", "htmlwidgets", "hts", "HTSSIP", "httk", "httpcache", "httping", "httptest", "httpuv", "hunspell", "hyperSpec", "hypervolume", "ic.infer", "ICS", "ICSNP", "igraph", "imagine", "IMPACT", "imputeTestbench", "imputeTS", "ini", "inlmisc", "InSilicoVA", "InterVA4", "inTrees", "iotools", "irlba", "irtoys", "ISOcodes", "iterators", "iterpc", "JADE", "jagsUI", "janeaustenr", "JGR", "JM", "jmvcore", "jointDiag", "jomo", "jsonlite", "kdecopula", "KFAS", "kimisc", "klaR", "knitr", "kohonen", "ks", "kSamples", "kyotil", "l0ara", "l1kdeconv", "L1pack", "l2boost", "labelled", "LabourMarketAreas", "LaF", "laGP", "lakemorpho", "lambda.r", "lamW", "landscapeR", "languagelayeR", "LaplacesDemon", "largeVis", "lassopv", "latentnet", "lattice", "LatticeKrig", "lava", "lawn", "lawstat", "lazyeval", "lazyWeave", "lba", "lbreg", "LBSPR", "LCF", "LCMCR", "lcmm", "lctools", "ldbod", "LDcorSV", "LDheatmap", "ldhmm", "LDRTools", "ldstatsHD", "leaflet.minicharts", "LeArEst", "LearnBayes", "LEGIT", "LendingClub", "lessR", "letsR", "lexicon", "lexRankr", "lfactors", "lfe", "lfl", "LGEWIS", "lgtdl", "lhs", "libcoin", "libsoc", "lidR", "lifecontingencies", "liftLRD", "liftr", "likelihoodAsy", "likeLTD", "limSolve", "LindenmayeR", "lingtypology", "link2GI", "LinkageMapView", "LinkedMatrix", "lintools", "lintr", "liquidSVM", "lira", "listenv", "listWithDefaults", "liteq", "liureg", "lm.br", "lme4", "lmerTest", "LMest", "lmmot", "lmodel2", "lmom", "lmomco", "lmomRFA", "lmridge", "lmSupport", "lmvar", "loa", "Lock5Data", "logbin", "logitnorm", "logmult", "longclust", "LoopAnalyst", "LowRankQP", "lpdensity", "lplyr", "LPM", "lpme", "lqr", "lrgs", "LSAmitR", "lsasim", "LSD", "LSDinterface", "lsei", "lsl", "lsmeans", "ltm", "ltmle", "LTRCtrees", "ltsk", "lubridate", "ludic", "Luminescence", "lvnet", "macc", "macleish", "mada", "madness", "mafs", "magclass", "magic", "magicaxis", "magick", "MAINT.Data", "MALDIquant", "MALDIquantForeign", "MAMS", "manifestoR", "ManifoldOptim", "manipulate", "manipulateWidget", "ManlyMix", "MANOVA.RM", "MAPA", "mapmisc", "mapproj", "maps", "mapview", "MareyMap", "markmyassignment", "markophylo", "markovchain", "MASS", "MasterBayes", "matchingMarkets", "matchingR", "MatchIt", "matchMulti", "matlabr", "Matrix", "Matrix.utils", "MatrixCorrelation", "MatrixEQTL", "matrixpls", "matrixStats", "MAVE", "MAVIS", "MaxentVariableSelection", "MaxSkew", "MazamaSpatialUtils", "mazeGen", "mbbefd", "MBC", "MBESS", "MBHdesign", "mboost", "MBSGS", "mBvs", "MCDA", "MCI", "mclogit", "mclust", "MCMCglmm", "MCMCpack", "MCMCprecision", "mcmcse", "MCMCvis", "Mcomp", "mcPAFit", "MCPMod", "MCS", "mctest", "mda", "mdmb", "MDMR", "mdpeer", "MDplot", "mdsOpt", "mdsr", "meanShiftR", "measuRing", "medflex", "Mediana", "mediation", "mem", "memisc", "memo", "memuse", "MendelianRandomization", "merDeriv", "MESS", "meta", "meta4diag", "MetaboList", "metacoder", "metacom", "MetaComp", "metafor", "MetaLandSim", "metamisc", "metansue", "metaplot", "metaplus", "metaSEM", "metasens", "metaviz", "meteoland", "MetFns", "Metrics", "metricTester", "metRology", "mets", "metScanR", "mev", "mexhaz", "MfUSampler", "mgcv", "MGLM", "mgm", "mHG", "MHTdiscrete", "mice", "miceadds", "micompr", "microbenchmark", "micromap", "micropan", "microplot", "microPop", "microseq", "migest", "MIICD", "MIIVsem", "milr", "minerva", "miniCRAN", "minimaxdesign", "minval", "mirt", "mirtCAT", "miscF", "missDeaths", "mistat", "MitISEM", "mix", "mixedsde", "MixGHD", "mixlink", "mixlm", "mixOmics", "MixSim", "mixsmsn", "mixture", "mizer", "mkin", "MKmisc", "mldr", "mldr.datasets", "mlegp", "mlr", "mlrMBO", "mlt", "mlt.docreg", "mltools", "mlVAR", "mlxR", "mma", "mmand", "mmap", "mmcm", "MMDai", "mmpf", "mmpp", "mnis", "MNM", "MNP", "mockery", "modelObj", "modelr", "MODIS", "MODIStsp", "modules", "MOEADr", "mogavs", "mokken", "moko", "molaR", "mombf", "Momocs", "MonetDBLite", "mongolite", "monitoR", "monkeylearn", "monmlp", "MonoPoly", "MonteCarlo", "morse", "MortHump", "mosaic", "mosaicData", "moult", "mountainplot", "mousetrap", "move", "moveHMM", "movMF", "mpath", "MPLikelihoodWB", "mplot", "MplusAutomation", "mpmcorrelogram", "mpoly", "MPSEM", "mra", "mrds", "mregions", "mrfDepth", "mrgsolve", "mrMLM", "mRMRe", "MRS", "msaenet", "msaR", "msBP", "MSCMT", "MSGARCH", "msm", "msma", "msme", "msmtools", "msos", "MST", "MTA", "mtsdi", "mudfold", "multcomp", "multdyn", "multgee", "multiCA", "multigraph", "MultiLCIRT", "multimark", "multinet", "MultiOrd", "multipanelfigure", "MultiPhen", "multiplex", "multipol", "multisensi", "multisom", "multitaper", "MultivariateRandomForest", "multivator", "multiway", "MuMIn", "muRL", "mutoss", "mutossGUI", "mvabund", "MVar.pt", "mvdalab", "mvLSW", "mvmesh", "mvmeta", "mvMORPH", "MVN", "mvna", "mvnfast", "mvoutlier", "mvPot", "MVR", "mvSLOUCH", "mvtnorm", "mwaved", "MXM", "Myrrix", "Myrrixjars", "myTAI", "nabor", "naivebayes", "NAM", "NanoStringNorm", "nanotime", "narray", "nat", "nCal", "ncar", "ncf", "ncvreg", "ndjson", "nearfar", "neat", "neldermead", "neotoma", "nephro", "NestedCategBayesImpute", "net.security", "netassoc", "netCoin", "netdiffuseR", "netmeta", "nets", "NetworkChange", "NetworkInference", "networktools", "NeuralNetTools", "neurobase", "ngram", "ngspatial", "NHMSAR", "nima", "nimble", "Nippon", "NlcOptim", "nleqslv", "nlme", "NLP", "nlsem", "nlsr", "nlstimedist", "nlts", "NMF", "NMOF", "nmw", "NNS", "nodiv", "nomclust", "nomogramEx", "NonCompart", "nonmem2R", "nonmemica", "nonnest2", "nonpar", "NonpModelCheck", "nopp", "nor1mix", "NormPsy", "np", "nparACT", "npbr", "npcopTest", "npcp", "NPflow", "npregfast", "nprobust", "nproc", "npROCRegression", "npsf", "npsurv", "nricens", "nscancor", "NScluster", "NSM3", "nsRFA", "NUCOMBog", "numOSL", "nzelect", "nzpullover", "OAIHarvester", "Oarray", "oasis", "OasisR", "oaxaca", "OBsMD", "oc", "oce", "odbc", "oddsratio", "oec", "oem", "officer", "oii", "ompr", "ompr.roi", "OneArmPhaseTwoStudy", "onemap", "OneR", "onewaytests", "onion", "OOBCurve", "OOR", "OpasnetUtils", "OPDOE", "openair", "opencage", "opencpu", "OpenImageR", "openintro", "OpenML", "OpenMPController", "OpenMx", "openNLPdata", "openssl", "OPI", "optband", "opticut", "optimization", "optimsimplex", "optimus", "optiSel", "optmatch", "optparse", "orclus", "orcutt", "ordinalCont", "ordinalForest", "ordinalNet", "OrdNor", "ores", "OrgMassSpecR", "orloca", "orloca.es", "oro.nifti", "oro.pet", "orsk", "osmplotr", "osrm", "otrimle", "OTUtable", "ouch", "outbreaker", "outbreaks", "OutbreakTools", "overlap", "overlapping", "PAC", "packcircles", "packrat", "pacman", "paco", "pacotest", "padr", "PAFit", "pagenum", "PairedData", "pairwise", "paleofire", "paleotree", "palm", "pals", "pander", "pangaear", "PanJen", "paramGUI", "paramlink", "parfm", "parsemsf", "partialAR", "partitions", "party", "partykit", "pastecs", "PathSelectMP", "patternplot", "pavo", "pbapply", "PBD", "pbdBASE", "pbdMPI", "pbdRPC", "pbdSLAP", "pbdZMQ", "PBIBD", "PBNPA", "PBSmapping", "PBSmodelling", "pcaL1", "pcalg", "PCAmixdata", "pcaPP", "pcdpca", "pcev", "pcnetmeta", "PCovR", "pdfetch", "pdftools", "pdmod", "pdp", "PdPDB", "pdSpecEst", "PearsonDS", "pec", "pedantics", "pegas", "PEIP", "Peptides", "PerformanceAnalytics", "PeriodicTable", "PerMallows", "permGS", "permPATH", "PET", "pgam", "PGEE", "pgirmess", "pglm", "pgmm", "ph2bayes", "phangorn", "phase1RMD", "phenex", "PHENIX", "pheno2geno", "phenology", "phmm", "phonics", "photobiology", "photobiologyLamps", "photobiologyLEDs", "phrasemachine", "phybreak", "phyclust", "phylocanvas", "phylocurve", "PhylogeneticEM", "PHYLOGR", "phylopath", "phylosignal", "phylotate", "phylotools", "phyloTop", "phytools", "picasso", "PIGE", "pim", "pinbasic", "pinnacle.API", "pipe.design", "pipeGS", "pivottabler", "pixiedust", "PK", "PKI", "PKNCA", "pkr", "plantecophys", "plaqr", "PlasmaMutationDetector", "plater", "platetools", "pleiades", "pleio", "plfm", "plfMA", "plink", "plm", "PLMIX", "plot3D", "plotfunctions", "plotKML", "plotly", "plotmo", "plotrix", "plotROC", "plotrr", "plotSEMM", "plsgenomics", "plsVarSel", "pltesim", "plumber", "pmclust", "PMCMR", "pmhtutorial", "pmml", "pocrm", "pointdensityP", "PoisBinNonNor", "PoisBinOrd", "PoisBinOrdNonNor", "PoisBinOrdNor", "PoisNonNor", "PoisNor", "pollen", "polmineR", "polyapost", "Polychrome", "polyCub", "PolynomF", "polysat", "Pomic", "pomp", "popdemo", "popEpi", "PopGenome", "poplite", "poppr", "popsom", "population", "portes", "PottsUtils", "PoweR", "Power2Stage", "poweRlaw", "powerMediation", "powerplus", "powerSurvEpi", "PowerTOST", "PowerUpR", "PP", "PPtreeViz", "pracma", "PracTools", "prc", "prcr", "pre", "precrec", "predatory", "PredPsych", "prefmod", "PReMiuM", "prereg", "preseqR", "PResiduals", "preText", "prettycode", "prettydoc", "prettymapr", "PrevMap", "PRIMME", "PRIMsrc", "prioritylasso", "PrivateLR", "pROC", "productivity", "ProFit", "profmem", "profvis", "ProjectTemplate", "propagate", "PropCIs", "PropClust", "properties", "prophet", "propr", "protolite", "protr", "ProTrackR", "protViz", "provenance", "proxy", "pryr", "psbcGroup", "PSCBS", "pscl", "pse", "pseudo", "psgp", "pspline", "Pstat", "psych", "PTE", "PtProcess", "PTXQC", "pubmed.mineR", "PubMedWordcloud", "pulsar", "pvclass", "PWEALL", "PWFSLSmoke", "pwr", "PwrGSD", "PythonInR", "qboxplot", "QCA", "QCApro", "qcc", "qdap", "qdapDictionaries", "qdapTools", "qGaussian", "QGglmm", "qgraph", "qicharts", "qlcData", "QoLR", "QRegVCM", "qrmtools", "qrnn", "qte", "qtl", "qtlbook", "qtlcharts", "qtlmt", "QTLRel", "qualpalr", "qualtRics", "qualV", "qualvar", "quanteda", "quantmod", "quantoptr", "quantreg", "quantregForest", "quantregGrowth", "QuantTools", "QuantumClone", "questionr", "queuecomputer", "queueing", "quickReg", "qut", "qvcalc", "QZ", "R.cache", "R.filesets", "R.rsp", "R.utils", "R2admb", "R2BayesX", "r2glmm", "R2MLwiN", "R2SWF", "R6", "radiant", "radiant.basics", "radiant.data", "radiant.design", "radiant.model", "radiant.multivariate", "RadOnc", "RAdwords", "ragt2ridges", "rakeR", "rAmCharts", "RAMP", "randomcoloR", "randomForestSRC", "randomizeR", "randomizr", "randomLCA", "randomNames", "RandPro", "randtoolbox", "rangeBuilder", "ranger", "RankAggreg", "RANN", "raptr", "rarhsmm", "rase", "raster", "rasterVis", "ratelimitr", "ratesci", "RatingScaleReduction", "rattle", "rAverage", "raw", "rbcb", "rbi", "rbiouml", "Rblpapi", "RBMRB", "Rborist", "RBPcurve", "rCBA", "rcbalance", "rcbsubset", "rcdd", "rcdk", "rcdklibs", "rclimateca", "RcmdrMisc", "RcmdrPlugin.BiclustGUI", "RcmdrPlugin.EZR", "RcmdrPlugin.GWRM", "RcmdrPlugin.KMggplot2", "RcmdrPlugin.NMBU", "RcmdrPlugin.survival", "RcmdrPlugin.temis", "RcmdrPlugin.UCA", "rcompanion", "RCPmod", "Rcpp", "RcppAnnoy", "RcppArmadillo", "RcppBlaze", "RcppCCTZ", "RcppClassic", "RcppClassicExamples", "RcppCNPy", "RcppEigen", "RcppGSL", "RcppHMM", "RcppHoney", "RcppNumerical", "RcppParallel", "RcppProgress", "RcppQuantuccia", "RcppRedis", "RcppSMC", "RcppTOML", "RcppZiggurat", "rcrossref", "Rcssplot", "RCurl", "rdatacite", "rddensity", "rdist", "rdlocrand", "RDML", "RDocumentation", "rdomains", "Rdpack", "rdpla", "rdrobust", "rdrop2", "rdryad", "RDS", "rdwd", "reactR", "ReacTran", "readstata13", "RealVAMS", "REAT", "rebird", "rebmix", "rebus", "rebus.base", "recmap", "recosystem", "red", "reda", "redcapAPI", "REDCapR", "reddPrec", "rEDM", "refimpact", "RefManageR", "refset", "registry", "reglogit", "regsem", "ReinforcementLearning", "ReIns", "rel", "relaimpo", "Relatedness", "relations", "relSim", "relsurv", "rem", "remoter", "remotes", "REndo", "rentrez", "repfdr", "replicatedpp2w", "replyr", "repo", "ReporteRs", "ReporteRsjars", "reportROC", "reprex", "reproducer", "rerddap", "reReg", "reshape", "reshape2", "respirometry", "restfulr", "restriktor", "rethinker", "reticulate", "revdbayes", "rex", "rexpokit", "Rfacebook", "Rfast", "rFerns", "Rfmtool", "rfoaas", "RFOC", "rFSA", "rfUtilities", "Rgb", "rgbif", "RGBM", "Rgbp", "RGCCA", "rgdal", "rgenoud", "rgeolocate", "rgeos", "rglobi", "Rglpk", "rGoodData", "RGoogleFit", "rgr", "rgrass7", "rGroovy", "RGtk2", "RH2", "rhandsontable", "RHMS", "Rhpc", "RhpcBLASctl", "RIA", "rif", "RInno", "RInside", "RInSp", "rintrojs", "rio", "rioja", "riskRegression", "RISmed", "ritis", "riverdist", "rivernet", "RJafroc", "rJava", "RJDBC", "rJPSGCS", "RJSDMX", "rkafka", "rkafkajars", "RKEAjars", "RKEEL", "Rlabkey", "rLakeAnalyzer", "rlang", "rlas", "Rlda", "rLDCP", "Rlibeemd", "rLiDAR", "RLT", "rLTP", "RLumModel", "RLumShiny", "rmapshaper", "RmarineHeatWaves", "RMark", "rmarkdown", "rmatio", "rmcfs", "rmcorr", "rmdformats", "rmdshower", "rmeta", "rmetasim", "RMixpanel", "Rmpfr", "rmpw", "rMR", "rms", "rmumps", "RMySQL", "RNAseqNet", "RndTexExams", "RNetCDF", "RNetLogo", "RNeXML", "rngWELL", "RNifti", "RNiftyReg", "rnoaa", "rNOMADS", "RNRCS", "roadoi", "roahd", "robCompositions", "robets", "robotstxt", "robumeta", "robust", "robustbase", "RobustGaSP", "robustlmm", "robustrank", "robustrao", "robustreg", "roccv", "rockchalk", "rococo", "RODBCext", "rodeo", "rodham", "ROI", "ROI.plugin.clp", "ROI.plugin.ecos", "ROI.plugin.glpk", "ROI.plugin.ipop", "ROI.plugin.lpsolve", "ROI.plugin.nloptr", "ROI.plugin.quadprog", "ROI.plugin.scs", "ROI.plugin.symphony", "roll", "RootsExtremaInflections", "rootWishart", "ropenaq", "rorcid", "rosetteApi", "rospca", "rpart", "rpatrec", "Rpdb", "rpdo", "RPEnsemble", "rpf", "rpg", "rpgm", "rphast", "rpivotTable", "rplos", "RPMG", "rpms", "rpostgis", "rpostgisLT", "RPostgreSQL", "RPPanalyzer", "RPresto", "rprev", "rprojroot", "RProtoBuf", "rpsftm", "rptR", "RQDA", "RQGIS", "rqPen", "Rramas", "rrBLUP", "Rrdrand", "rrecsys", "rredlist", "rrepast", "RRreg", "RSA", "RSAGA", "Rsampletrees", "rSCA", "RSCABS", "rscala", "rsconnect", "rscopus", "rscorecard", "RSDA", "rsdmx", "RSEIS", "RSentiment", "RSiena", "RSiteCatalyst", "rslurm", "rsm", "RSmartlyIO", "RSNNS", "RSNPset", "RSocrata", "rsoi", "rsolr", "Rsomoclu", "rspa", "rsparkling", "rsq", "RSQLite", "Rssa", "rstan", "rstanarm", "rstantools", "RStoolbox", "rstpm2", "rstream", "rstudioapi", "RSurvey", "rsvd", "Rsymphony", "rTableICC", "rtdists", "rtfbs", "rticles", "rtide", "rtimes", "rtip", "rtk", "rtkore", "RTOMO", "rtop", "RTransProb", "RTriangle", "rtrim", "rts", "Rttf2pt1", "RtutoR", "rtweet", "rtypeform", "rucrdtw", "rugarch", "Runuran", "RunuranGUI", "rust", "ruv", "rv", "RVAideMemoire", "Rvcg", "rvcheck", "rvertnet", "rvg", "RViennaCL", "Rvmmin", "Rwave", "RWeka", "RWekajars", "rWind", "RxnSim", "RxODE", "rzmq", "s2", "s20x", "sads", "saemix", "saeSim", "safer", "SALTSampler", "SamplerCompare", "sampleSelection", "samplingbook", "SamplingStrata", "samplingVarEst", "sampSurf", "sandwich", "sankey", "sarima", "SASxport", "satellite", "scales", "scam", "scanstatistics", "scape", "scatterD3", "scatterpie", "scatterplot3d", "scclust", "schumaker", "sciplot", "SciViews", "SCMA", "scoring", "scoringRules", "ScottKnottESD", "SCperf", "scrm", "SCRSELECT", "SCRT", "SCVA", "sdcMicro", "sdcTable", "sdm", "SDMPlay", "sdmpredictors", "seacarb", "searchConsoleR", "seasonal", "seasonalview", "secr", "secrdesign", "secrlinear", "SEERaBomb", "seewave", "SegCorr", "segmented", "Select", "selectiveInference", "selectr", "SelvarMix", "sem", "SemiCompRisks", "SEMID", "SemiParSampleSel", "semtree", "sensiPhy", "sensitivity", "SensMixed", "sensR", "SensusR", "sentimentr", "SeqFeatR", "seqHMM", "seqinr", "seqminer", "Sequential", "sequoia", "serial", "seriation", "servr", "SetMethods", "sets", "sf", "sfinx", "sfsmisc", "sft", "sgee", "sgPLS", "shades", "shadow", "shape", "shapes", "shazam", "SHELF", "shiny", "shinydashboard", "shinyFeedback", "ShinyItemAnalysis", "shinyjqui", "shinyjs", "shinymaterial", "shinystan", "shinyWidgets", "showtext", "showtextdb", "shp2graph", "ShrinkCovMat", "SIBER", "sicegar", "SIDES", "sidier", "sidrar", "sigr", "SigTree", "Sim.DiffProc", "simcausal", "SimComp", "SimCorMultRes", "SimDesign", "simecol", "simest", "simex", "SimInf", "simmer", "simmer.plot", "SIMMS", "simPH", "simPop", "simputation", "simr", "SiMRiv", "simstudy", "simule", "sirt", "SIS", "sisVIVE", "sitar", "sitmo", "sitree", "SixSigma", "sjmisc", "sjPlot", "sjstats", "SKAT", "skeleSim", "skmeans", "SkyWatchr", "slam", "SLDAssay", "slickR", "slim", "smacof", "smacpod", "smapr", "SmartSVA", "smatr", "smbinning", "smcfcs", "sme", "Smisc", "SMMA", "smoof", "smooth", "smoothAPC", "SmoothHazard", "smoothSurv", "smotefamily", "sn", "SNFtool", "snht", "snowFT", "snplist", "sNPLS", "SNSequate", "SocialMediaLab", "sodavis", "sofa", "SOIL", "soilDB", "soilphysics", "soiltexture", "soilwater", "solrium", "solvebio", "SOMbrero", "sommer", "sos", "sotkanet", "sound", "soundecology", "sourceR", "SoyNAM", "sp", "spacetime", "spAddins", "SpaDES", "spam", "spaMM", "spark", "sparklyr", "sparr", "sparsebn", "sparsebnUtils", "sparseFLMM", "sparseHessianFD", "SparseM", "sparseMVN", "sparsepp", "sparsesvd", "spartan", "spass", "SPAtest", "spatgraphs", "spatialEco", "SpatialEpiApp", "SpatialExtremes", "spatialkernel", "SpatialNP", "SpatialPack", "SpatialPosition", "SpatialVx", "SpatPCA", "SpATS", "spatstat", "spatstat.local", "spatstat.utils", "spbabel", "spBayes", "spBayesSurv", "spc", "spcosa", "spdep", "spdplyr", "spduration", "speaq", "SpecHelpers", "SPEDInstabR", "spef", "SPEI", "sperrorest", "spex", "spgs", "spgwr", "SphericalCubature", "sphet", "spind", "splines2", "splithalf", "splm", "spm12r", "spMC", "spmoran", "spongecake", "SPOT", "sppmix", "spray", "spsann", "spTDyn", "spTest", "spTimer", "sptm", "spup", "spuRs", "sqldf", "SqlRender", "sqlscore", "SQUAREM", "squash", "srvyr", "SSDforR", "SSDM", "SSN", "sspse", "SSRMST", "stabs", "stacomirtools", "StAMPP", "standardize", "StanHeaders", "stargazer", "startup", "statar", "statip", "statmod", "statnet.common", "statquotes", "stdReg", "stepPlr", "stepR", "stilt", "stm", "stochvol", "stocks", "storr", "stplanr", "stpm", "stpp", "StrainRanking", "Strategy", "streamMOA", "stringdist", "stringformattr", "stringi", "striprtf", "structree", "strvalidator", "stubthat", "stylo", "subniche", "subplex", "subprocess", "subrank", "subselect", "subspaceMOA", "SubVis", "sudokuAlt", "summarytools", "sunburstR", "SuperExactTest", "SuperLearner", "SuperRanker", "support.BWS", "Surrogate", "surrosurv", "surv2sampleComp", "surveillance", "survey", "surveydata", "surveyplanning", "survival", "survivalMPL", "survminer", "survPresmooth", "survutils", "svd", "svglite", "svgViewR", "svMisc", "SVMMaj", "swamp", "swCRTdesign", "swirlify", "switchr", "SWMPr", "sybil", "symbolicDA", "synbreed", "SyncRNG", "synthpop", "sys", "sysfonts", "systemicrisk", "syuzhet", "tablaxlsx", "table1xls", "tableHTML", "tableone", "tables", "tadaatoolbox", "TAM", "TANDEM", "Tariff", "taskscheduleR", "tau", "taxize", "Taxonstand", "TcGSA", "tcgsaseq", "tclust", "TDA", "tdr", "teigen", "templates", "tempR", "tensorBSS", "tensorflow", "tergm", "tesseract", "TestFunctions", "testit", "testthat", "TeXCheckR", "texmex", "texPreview", "text2vec", "textclean", "textir", "textmineR", "textreadr", "textshape", "textstem", "textTinyR", "tgram", "Thermimage", "thief", "threejs", "thregI", "ThresholdROC", "tibble", "tictactoe", "TideCurves", "TideHarmonics", "Tides", "TideTables", "tidyquant", "tidyr", "tidyRSS", "tidytext", "tidyverse", "tidyxl", "tigger", "tigris", "tikzDevice", "TileManager", "timeDate", "timedelay", "timereg", "timeSeq", "timeSeries", "timetools", "timsac", "Tinflex", "tint", "TipDatingBeast", "tis", "tm.plugin.factiva", "tm.plugin.lexisnexis", "tmap", "tmaptools", "TMB", "Tmisc", "tmle", "tmod", "toOrdinal", "topmodel", "TOSTER", "TotalCopheneticIndex", "tourr", "TP.idm", "TPEA", "TR8", "trackeR", "tractor.base", "traits", "TraMineR", "TraMineRextras", "TransModel", "transport", "TreatmentSelection", "treatSens", "tree", "TreeBUGS", "treeman", "treeplyr", "TreeSimGM", "treespace", "treethresh", "trelliscope", "trend", "TrendInTrend", "triangle", "TriMatch", "TropFishR", "truncnorm", "trustOptim", "tsBSS", "TSclust", "TSdbi", "TSdist", "tsDyn", "tseries", "tsiR", "tsoutliers", "tsPI", "TSS.RESTREND", "TSsql", "TTAinterfaceTrendAnalysis", "TTR", "tuber", "tufte", "TukeyC", "TurtleGraphics", "twang", "tweedie", "UBL", "uiucthemes", "umx", "UncertainInterval", "UNF", "unfoldr", "Unicode", "unitedR", "unitizer", "units", "unittest", "unmarked", "unpivotr", "untb", "unvotes", "urltools", "USAboundaries", "usdm", "useful", "userfriendlyscience", "usl", "usmap", "utility", "utiml", "uwIntroStats", "V8", "valaddin", "validate", "valr", "valuer", "varbvs", "vardpoor", "VarfromPDB", "varhandle", "variables", "VarReg", "VARSEDIG", "VarSelLCM", "varSelRF", "VCA", "vcd", "vcdExtra", "vcfR", "vcrpart", "vdiffr", "vdmR", "vecsets", "vegan", "vegan3d", "vegclust", "vegdata", "velox", "vembedr", "venn", "VennDiagram", "vennplot", "VGAM", "VineCopula", "viridis", "viridisLite", "virtualspecies", "virustotal", "visNetwork", "visreg", "vistime", "visualize", "VNM", "vocaldia", "vortexR", "vote", "vowels", "voxel", "vqtl", "VRPM", "VTrack", "vtreat", "VWPre", "wallace", "warbleR", "WARN", "water", "waterData", "waterfalls", "WaveletComp", "WaveLetLongMemory", "wavemulcor", "waver", "wbstats", "wbsts", "wCorr", "webchem", "WebGestaltR", "webshot", "webutils", "wec", "weco", "WeightedCluster", "welchADF", "wfe", "WGCNA", "wgeesel", "WhatIf", "WhiteStripe", "whoami", "wicket", "widgetframe", "WikidataQueryServiceR", "WikidataR", "wikilake", "wikipediatrend", "wikitaxa", "wiqid", "withr", "wmtsa", "wnominate", "woeBinning", "word.alignment", "wordbankr", "wordcloud2", "wordnet", "worldmet", "worrms", "wppExplorer", "Wrapped", "wrapr", "wrassp", "WRS2", "wrswoR", "wrswoR.benchmark", "WRTDStidal", "wru", "wsrf", "wtest", "WufooR", "WVPlots", "WWR", "x.ent", "x12", "x13binary", "xaringan", "xgboost", "XGR", "XiMpLe", "XLConnect", "XLConnectJars", "xLLiM", "xmeta", "XML", "xml2", "xoi", "xpose4", "XR", "XRJulia", "xslt", "xtractomatic", "xts", "xxIRT", "yaImpute", "yaml", "yhatr", "yuima", "yuimaGUI", "zCompositions", "zeallot", "ZeBook", "zebu", "Zelig", "ZeligChoice", "ZeligEI", "zenplots", "zetadiv", "ZIBseq", "zic", "zipfR", "ziphsmm", "zoeppritz", "zoib", "zoo", "zoon"))
install.packages("ROauth")
install.packages("ROauth")
install.packages("ROAuth")
library(ROAuth)
library("twitteR")
### 以下の ################################################## を自身が取得したキーに置き換える
# Consumer Key
consumerKey <- "66EYdk5YbiSiE2rFDKB24sqwp"
# Consumer Secret
consumerSecret <- "zBmM9DOIyYXut9u97DR83siw8ZJRDzTe8iOha0q88ZZFeoTpxc"
# Access Token
accessToken <- "898910528730406912-zKbDnTeda1pHuQvXgokDmQOzxnB3XAh"
# Access Token Secret
accessSecret <- "	lxpkojqoTPABQT2g3F5SZvI9CNPTmwyDpiIg7TTAn8tlb"
### 11.3 認証
options(httr_oauth_cache = TRUE)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
update.packages(c("twitteR", "bit64", "rjson", "DBI", "httr",
"base64enc"))
update.packages(c("twitteR", "bit64", "rjson", "DBI", "httr",
"base64enc"),dependencies=TRUE)
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL ="https://api.twitter.com/oauth/request_token",
accessURL = "https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="cacert.pem")
cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL ="https://api.twitter.com/oauth/request_token",
accessURL = "https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL ="https://api.twitter.com/oauth/request_token",
accessURL = "https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
################################# 認証 エラー  #############################
options(httr_oauth_cache = TRUE)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
### 11.4 twitteR の利用
## Windowsの場合文字コードを変換して投稿する
tweet(iconv("2017 1 14 R から呟いてみる",
from = "UTF-8", to = "CP932"))
### 特定のアカウントのツィートを取得
tweets <- userTimeline("mextjapan", 200)
str(tweets[[1]])
texts <- sapply(tweets, statusText)
update.packages(c("twitteR", "bit64", "rjson", "DBI", "httr",
"base64enc"),dependencies=TRUE)
update.packages(c("twitteR", "bit64", "rjson", "DBI", "httr",
"base64enc", "ROAuth"),dependencies=TRUE)
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL ="https://api.twitter.com/oauth/request_token",
accessURL = "https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="cacert.pem")
